/*
 * This file is generated by jOOQ.
 */
package model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import model.Chat;
import model.Keys;
import model.tables.records.MessageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageJ extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chat.message</code>
     */
    public static final MessageJ MESSAGE = new MessageJ();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>chat.message.id</code>.
     */
    public final TableField<MessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>chat.message.content</code>.
     */
    public final TableField<MessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>chat.message.date</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>chat.message.sender</code>.
     */
    public final TableField<MessageRecord, Integer> SENDER = createField(DSL.name("sender"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chat.message.receiver</code>.
     */
    public final TableField<MessageRecord, Integer> RECEIVER = createField(DSL.name("receiver"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chat.message.sent</code>.
     */
    public final TableField<MessageRecord, Boolean> SENT = createField(DSL.name("sent"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private MessageJ(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageJ(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chat.message</code> table reference
     */
    public MessageJ(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>chat.message</code> table reference
     */
    public MessageJ(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>chat.message</code> table reference
     */
    public MessageJ() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> MessageJ(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Chat.CHAT;
    }

    @Override
    public Identity<MessageRecord, Integer> getIdentity() {
        return (Identity<MessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<ForeignKey<MessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MESSAGE__MESSAGE_SENDER_FKEY, Keys.MESSAGE__MESSAGE_RECEIVER_FKEY);
    }

    private transient ReceiverJ _messageSenderFkey;
    private transient ReceiverJ _messageReceiverFkey;

    /**
     * Get the implicit join path to the <code>chat.receiver</code> table, via
     * the <code>message_sender_fkey</code> key.
     */
    public ReceiverJ messageSenderFkey() {
        if (_messageSenderFkey == null)
            _messageSenderFkey = new ReceiverJ(this, Keys.MESSAGE__MESSAGE_SENDER_FKEY);

        return _messageSenderFkey;
    }

    /**
     * Get the implicit join path to the <code>chat.receiver</code> table, via
     * the <code>message_receiver_fkey</code> key.
     */
    public ReceiverJ messageReceiverFkey() {
        if (_messageReceiverFkey == null)
            _messageReceiverFkey = new ReceiverJ(this, Keys.MESSAGE__MESSAGE_RECEIVER_FKEY);

        return _messageReceiverFkey;
    }

    @Override
    public MessageJ as(String alias) {
        return new MessageJ(DSL.name(alias), this);
    }

    @Override
    public MessageJ as(Name alias) {
        return new MessageJ(alias, this);
    }

    @Override
    public MessageJ as(Table<?> alias) {
        return new MessageJ(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageJ rename(String name) {
        return new MessageJ(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageJ rename(Name name) {
        return new MessageJ(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageJ rename(Table<?> name) {
        return new MessageJ(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, Integer, Integer, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
